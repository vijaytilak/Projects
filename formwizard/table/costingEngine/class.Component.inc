<!-- begin of generated class -->
<?php
/*
*
* -------------------------------------------------------
* CLASSNAME:        Component
* GENERATION DATE:  25.06.2014
* CLASS FILE:       C:\xampp\htdocs\sqlclassgenerator/generated_classes/class.costing.php
* FOR MYSQL TABLE:  fresco_costing_array_primary
* FOR MYSQL DB:     vtigercrm
* -------------------------------------------------------
* CODE GENERATED BY: vijay tilak, Fresco Shades
* MY PHP-MYSQL-CLASS GENERATOR
* from: >> www.voegeli.li >> (download for free!)
* -------------------------------------------------------
*
*/


// **********************
// CLASS DECLARATION
// **********************

//Component contains an abstract function and also implements interface 'Model'
abstract class Component implements Model {
	
	// Define Component Type id : Primary Canopy Components
	
	const COMPONENT_TYPE_FRAME = 1;
	const COMPONENT_TYPE_ROOF_FABRIC = 2;
	const COMPONENT_TYPE_ENDFILLS = 3;
	const COMPONENT_TYPE_CURTAIN_STATIC = 4;
	const COMPONENT_TYPE_CURTAIN_GLIDETRAK = 5;
	const COMPONENT_TYPE_CURTAIN_ZIP = 6;
	const COMPONENT_TYPE_DOOR = 7;
	const COMPONENT_TYPE_LOUVRE = 8;
	const COMPONENT_TYPE_BLINDS = 9;

	
	// Setting Valid Component Type Array : Key - Value Pair(Value should be without space which is the class name).
	static public $valid_component_types = array(
		Component::COMPONENT_TYPE_FRAME => 'Frame',
		Component::COMPONENT_TYPE_ROOF_FABRIC => 'RoofFabric',
		Component::COMPONENT_TYPE_ENDFILLS => 'EndFills',
		Component::COMPONENT_TYPE_CURTAIN_STATIC => 'StaticCurtain',
		Component::COMPONENT_TYPE_CURTAIN_GLIDETRAK => 'GlideTrakCurtain',
		Component::COMPONENT_TYPE_CURTAIN_ZIP => 'ZipCurtain',
		Component::COMPONENT_TYPE_DOOR => 'Door',
		Component::COMPONENT_TYPE_LOUVRE => 'Louvre',
		Component::COMPONENT_TYPE_BLINDS => 'Blinds',
	);


// **********************
// ATTRIBUTE DECLARATION
// **********************

	// Primary key of a Component.
	protected $_component_id;
	
	// Component type id.
	protected $_component_type_id;

	// Quote id.
	protected $_quote_id;

	// Component Name.
	public $component_name;

	// Component Parameters.
	public $metal;   
	public $powdercoating;   
	public $fabric;  
	public $processing;  
	public $wastage;  
	public $installation; 
	public $margin;   
	public $other;  



// **********************
// METHODS
// **********************

  /**
   * Constructor.
   * @param array $data Optional array of property names and values.
   */
  function __construct($data = array()) {
    $this->_init();
    
    // Ensure that the Address can be populated.
    if (!is_array($data)) {
      trigger_error('Unable to construct Component with a ' . get_class($name));
    }
    
    // If there is at least one value, populate the Address with it.
    if (count($data) > 0) {
      foreach ($data as $name => $value) {
        // Special case for protected properties ('_' have to dynamically add '_' while loading fields from db).
		// Helper function
        if (in_array($name, array(
          'component_id',
          'component_type_id',
		  'quote_id'
        ))) {
          $name = '_' . $name;
        }
        $this->$name = $value;
      }
    }
  }
  
  /**
   * Force extending classes to implement init method. 
   */
  abstract protected function _init();


  /**
   * Determine if a component type is valid.
   * @param int $component_type_id
   * @return boolean
   */
  static public function isValidComponentTypeId($component_type_id) {
    return array_key_exists($component_type_id, self::$valid_component_types);
  }


  /**
   * If valid, set the Component type id.
   * @param int $component_type_id 
   */
  protected function _setComponentTypeId($component_type_id) {
    if (self::isValidComponentTypeId($component_type_id)) {
      $this->_component_type_id = $component_type_id;
    }
  }
  
  /**
   * Load a Component from database.
   * @param int $component_id 
   */
  final public static function load($component_id) {
    $db = Database::getInstance();
    $mysqli = $db->getConnection();
    
    $sql_query  = 'SELECT * ';
    $sql_query .= 'FROM fresco_costing_component_array ';
    $sql_query .= 'WHERE component_id = "' . (int) $component_id . '" ';
    
    $result = $mysqli->query($sql_query);
    if ($row = $result->fetch_assoc()) {
      return self::getInstance($row['component_type_id'], $row);
    }
    throw new Exception('Component not found.');
  }

  /**
   * Given an component_type_id, return an instance of that subclass.
   * @param int $component_type_id
   * @param array $data 
   * @return Component subclass
   */
  final public static function getInstance($component_type_id, $data = array()) {
    $class_name = 'Component' . self::$valid_component_types[$component_type_id];
    return new $class_name($data);
  }

  
  /**
   * Save a Component to database. 
   */
  final public function save() {
    $db = Database::getInstance();
    $mysqli = $db->getConnection();
	
	//Insert into database if its a new component or update if its an existing one
    $sql_query  = 'INSERT INTO fresco_costing_component_array (component_id,component_type_id,quote_id,component_name,metal,powdercoating,fabric,processing,wastage,installation,margin,other) VALUES (';
    $sql_query .= '"'.$this->_component_id.'",';
    $sql_query .= '"'.$this->_component_type_id.'",';
    $sql_query .= '"'.$this->_quote_id.'",';
    $sql_query .= '"'.$this->component_name.'",';
    $sql_query .= '"'.$this->metal.'",';
    $sql_query .= '"'.$this->powdercoating.'",';
    $sql_query .= '"'.$this->fabric.'",';
    $sql_query .= '"'.$this->processing.'",';
    $sql_query .= '"'.$this->wastage.'",';
    $sql_query .= '"'.$this->installation.'",';
    $sql_query .= '"'.$this->margin.'",';
    $sql_query .= '"'.$this->other.'"';
    $sql_query .= ') ON DUPLICATE KEY UPDATE ';
    $sql_query .= 'component_type_id = "' . $this->_component_type_id . '", ';
    $sql_query .= 'quote_id = "' . $this->_quote_id . '", ';
    $sql_query .= 'component_name = "' . $this->component_name . '", ';
    $sql_query .= 'metal = "' . $this->metal . '", ';
    $sql_query .= 'powdercoating = "' . $this->powdercoating . '", ';
    $sql_query .= 'fabric = "' . $this->fabric . '", ';
    $sql_query .= 'processing = "' . $this->processing . '", ';
    $sql_query .= 'wastage = "' . $this->wastage . '", ';
    $sql_query .= 'installation = "' . $this->installation . '", ';
    $sql_query .= 'margin = "' . $this->margin . '", ';
    $sql_query .= 'other = "' . $this->other . '"';
  
    $result = $mysqli->query($sql_query);
    if (!$result) {
      trigger_error('Unable to write to database : SQL query :  ' . $sql_query);
    }
	return;
  }


  /**
   * Delete a Component from database. 
   */
  final public function delete() {
    $db = Database::getInstance();
    $mysqli = $db->getConnection();
	
    $sql_query  = 'DELETE FROM fresco_costing_component_array WHERE component_id ='.$this->_component_id;
  
    $result = $mysqli->query($sql_query);
    if (!$result) {
      trigger_error('Unable to delete from database : SQL query :  ' . $sql_query);
    }
	return;
  }


  /**
   * Display the component in HTML.
   * @return string 
   */
  function display() {
    $output = '';
    
    $output .= $this->_component_id;
    $output .= '<br/>' . $this->_component_type_id;
    $output .= '<br/>' . $this->_quote_id;
    $output .= '<br/>' . $this->component_name;
    $output .= '<br/>' . $this->metal;
    $output .= '<br/>' . $this->powdercoating;
    $output .= '<br/>' . $this->fabric;
    $output .= '<br/>' . $this->processing;
    $output .= '<br/>' . $this->wastage;
    $output .= '<br/>' . $this->installation;
    $output .= '<br/>' . $this->margin;
    $output .= '<br/>' . $this->other;

    $output .= '<br/>';
    
    return $output;
  }


  
  /**
   * Dynamically lookup from database.
   * @return object 
   */
// Lookup Methord *******************************************************
  public function dbLookup($select, $from, $where) {
    $return_array = array();
	$db = Database::getInstance();
    $mysqli = $db->getConnection();
	if(!$where)
	$where = 'quoteid = "'.$this->_quote_id.'"';
	
	//Build Query
	$sql_query = 'SELECT '.$select.' FROM '.$from.' WHERE '.$where;
	
	//RUN SQL
    $result = $mysqli->query($sql_query);
	while($row = mysqli_fetch_array($result, MYSQLI_ASSOC))
	  {
		$variable_array = explode(",",$select);
		foreach ($variable_array as $variable) {
		  $temp_array[$variable] = $row[$variable];
		}
		array_push($return_array,$temp_array);	
	  }
	  
    if (!$result) {
      trigger_error('Unable to query from database : SQL query :  ' . $sql_query);
    }
	
	return ($return_array);
  }
  
  /**
   * Dynamically lookup from database.
   * @return array 
   */
// Lookup Methord *******************************************************
  public function dbLookupfull($sql_query, $variables) {
    $return_array = array();
	$db = Database::getInstance();
    $mysqli = $db->getConnection();
	
	//RUN SQL
    $result = $mysqli->query($sql_query);
	while($row = mysqli_fetch_array($result, MYSQLI_ASSOC))
	  {
		$variable_array = explode(",",$variables);
		foreach ($variable_array as $variable) {
		  $temp_array[$variable] = $row[$variable];
		}
		array_push($return_array,$temp_array);	
	  }
	  
    if (!$result) {
      trigger_error('Unable to query from database : SQL query :  ' . $sql_query);
    }
	
	return ($return_array);
  }

// Action Methords *******************************************************





} // class Component : end

?>
<!-- end of generated class -->